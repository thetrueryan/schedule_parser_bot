from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram import F
import asyncio
import json
from datetime import timedelta, datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import os
from dotenv import load_dotenv, find_dotenv
from parser import run_parser
#============================================================================


#–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
load_dotenv(find_dotenv())
bot = Bot(token=os.getenv('BOT_TOKEN'))
dp = Dispatcher()
GROUPS_FILE = "./groups.json"
#============================================================================


#–ö–æ–º–∞–Ω–¥–∞ /START
@dp.message(CommandStart())
async def start_cmd(message: types.Message):
    today = datetime.now().date()
    max_date = today + timedelta(weeks=4)
    start_text = (
        '<b>üóì–ü—Ä–∏–≤–µ—Ç!\n –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ë–£-23! \n\n</b>'
        '<blockquote>'
        '–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω—É–∂–Ω—ã–π –¥–µ–Ω—å, –≤–≤–µ–¥–∏:\n'
       ' <code>/—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –î–î.–ú–ú.–ì–ì–ì–ì</code>\n'
       ' –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ:\n <code>—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –î–î.–ú–ú.–ì–ì–ì–ì</code>\n\n'
        '</blockquote>'
        '<b>–ü—Ä–∏–º–µ—Ä: <i>—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ 07.04.2025</i></b>\n\n'
        '<b><u>–í–ê–ñ–ù–û‚ÄºÔ∏è\n</u></b>'
        '<blockquote>'
        f'-–í–≤–µ–¥–µ–Ω–Ω–∞—è –¥–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ —Ä–∞–Ω—å—à–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è ({today})!\n'
        f'-–í–≤–µ–¥–µ–Ω–Ω–∞—è –¥–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ {max_date.strftime('%d.%m.%Y')}!'
        '</blockquote>'
    )
    await message.answer(start_text, parse_mode="HTML")
#============================================================================


#–ö–æ–º–∞–Ω–¥–∞ /—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
@dp.message(Command("—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"))
@dp.message(F.text.lower().startswith("—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ "))
async def get_schedule(message: types.Message):
    parts = message.text.split()
    
    if len(parts) != 2:
        await message.answer("–í–≤–µ–¥–∏: —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        return
        
    raw_date = parts[1]
    if len(raw_date) != 10:
        await message.answer("–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 05.04.2024)")
        return
    
    try:
        date = raw_date[6:10] + raw_date[3:5] + raw_date[0:2]
        #–∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
        with open("./schedule.json", "r", encoding="utf-8") as f:
            schedule = json.load(f)

        response = f"<b><u>üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {raw_date}:</u></b>\n\n"

        if not schedule[date]:
            response += ("<blockquote><b>#1\n ü§© –í–´–•–û–î–ù–û–ô </b></blockquote>")
            await message.answer(response, parse_mode="HTML")
            return

        lessons = schedule[date]
        for idx, lesson in enumerate(lessons, start=1):
            if "subject" in lesson:
                response += (
                    "<blockquote>"
                    f"<b>#{idx}</b>\n"
                    f"<b>üìö –ü—Ä–µ–¥–º–µ—Ç:</b> {lesson['subject']}\n"
                    f"<b>üë§ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:</b> {lesson['teacher']}\n"
                    f"<b>üïò –í—Ä–µ–º—è:</b> {lesson['time']}\n"
                    f"<b>üè´ –ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> {lesson['room']}\n\n"
                    "</blockquote>"
                )      
        await message.answer(response, parse_mode="HTML")
    except Exception:
        await message.answer("<b>‚ö†Ô∏è–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è!</b>", parse_mode="HTML")
#============================================================================


#–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ 10-00 –ø–æ –º—Å–∫ (–≤—Ä–µ–º—è –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
async def send_daily():
    try:
        next_day = (datetime.now() + timedelta(days=1)).strftime("%d.%m.%Y")
        date_key = (datetime.now() + timedelta(days=1)).strftime("%Y%m%d")

        with open("./schedule.json", "r", encoding="utf-8") as f:
            schedule = json.load(f)
        with open(GROUPS_FILE, "r", encoding="utf-8") as f:
            groups = json.load(f)


        if date_key not in schedule:
            response = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {next_day}:\n\n–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        elif not schedule[date_key]:
            response = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {next_day}:\n <blockquote><b>#1\n ü§© –í–´–•–û–î–ù–û–ô </b></blockquote>"
        else:
            response = f"<b><u>üìÖ –ê–≤—Ç–æ-–æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ {next_day}:</u></b>\n\n"
            for idx, lesson in enumerate(schedule[date_key], start=1):
                response += (
                    "<blockquote>"
                    f"<b>#{idx}</b>\n"
                    f"<b>üìö –ü—Ä–µ–¥–º–µ—Ç:</b> {lesson['subject']}\n"
                    f"<b>üë§ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:</b> {lesson['teacher']}\n"
                    f"<b>üïò –í—Ä–µ–º—è:</b> {lesson['time']}\n"
                    f"<b>üè´ –ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> {lesson['room']}\n\n"
                    "</blockquote>"
                )      
        for group_id in groups:
            try:
                await bot.send_message(
                    chat_id=group_id,
                    text=response,
                    parse_mode="HTML"
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ {group_id}: {e}")
    except Exception as e:
        print(f"–æ—à–∏–±–∫–∞: {e}")
#============================================================================


#–§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏/–¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
def save_id(chat_id: int):
    try:
        with open(GROUPS_FILE, "r", encoding="utf-8") as f:
            groups = json.load(f)
    except:
        groups = []
    
    if chat_id not in groups:
        groups.append(chat_id)
        with open(GROUPS_FILE, "w", encoding="utf-8") as f:
            json.dump(groups, f, indent=2)
        return True
    return False
#============================================================================


#–ö–æ–º–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞ –≤ —Ñ–∞–π–ª –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.message(Command("–¥–æ–±–∞–≤–∏—Ç—å"))
@dp.message(F.text.lower().startswith("–¥–æ–±–∞–≤–∏—Ç—å "))
async def add_chat_id(message: types.Message):
    if save_id(message.chat.id):
        await message.reply("‚úÖ–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–∞—Å—Å—ã–ª–∫–∏!")
    else:
        await message.reply("‚ÑπÔ∏è –ì—Ä—É–ø–ø–∞ —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ!")
#============================================================================


#–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
   # –ó–∞–¥–∞–Ω–∏—è –Ω–∞ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ (00:00, 06:00, 12:00, 18:00, 00:00)
    scheduler.add_job(run_parser, CronTrigger(hour='0,6,12,18', minute=0))

    # –ü–∞—Ä—Å–∏–Ω–≥ –ø–µ—Ä–µ–¥ –∞–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ 10:00
    scheduler.add_job(run_parser, CronTrigger(hour=9, minute=55))

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ 10:00
    scheduler.add_job(send_daily, CronTrigger(hour=10, minute=0))
    scheduler.start()
    await dp.start_polling(bot)
#============================================================================


if __name__ == "__main__":
    asyncio.run(main())